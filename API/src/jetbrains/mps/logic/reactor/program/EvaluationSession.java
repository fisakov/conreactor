package jetbrains.mps.logic.reactor.program;

/*Generated by MPS */

import jetbrains.mps.logic.reactor.constraint.PredicateSymbol;
import jetbrains.mps.logic.reactor.constraint.ComputingTracer;
import jetbrains.mps.logic.reactor.constraint.SessionSolver;
import jetbrains.mps.logic.reactor.constraint.ConstraintSymbol;
import jetbrains.mps.logic.reactor.constraint.ConstraintOccurrence;

/**
 * AKA "Handler"
 */
public abstract class EvaluationSession {

  public static EvaluationSession current() {
    if (ourBackend == null) {
      throw new IllegalStateException("no backend");
    }
    return ourBackend.current();
  }

  public static EvaluationSession.Config newSession() {
    if (ourBackend == null) {
      throw new IllegalStateException("no backend");
    }
    return ourBackend.createConfig();
  }

  public static abstract class Config {

    public abstract EvaluationSession.Config withPredicates(PredicateSymbol... predicateSymbols);

    public abstract EvaluationSession.Config withTrace(ComputingTracer computingTracer);

    public abstract EvaluationSession.Config withParam(String key, Object param);

    public abstract EvaluationSession start();
  }

  public abstract SessionSolver sessionSolver();

  public abstract Iterable<ConstraintSymbol> constraintSymbols();

  public abstract Iterable<ConstraintOccurrence> constraintOccurrences();

  public abstract Iterable<ConstraintOccurrence> constraintOccurrences(ConstraintSymbol symbol);

  protected static void setBackend(EvaluationSession.Backend backend) {
    if (ourBackend != null) {
      throw new IllegalStateException("backend already assigned");
    }
    ourBackend = backend;
  }

  protected static void clearBackend(EvaluationSession.Backend backend) {
    if (ourBackend != backend) {
      throw new IllegalStateException("illegal access");
    }
    ourBackend = null;
  }

  protected static interface Backend {

    public EvaluationSession current();

    public EvaluationSession.Config createConfig();

  }

  private static EvaluationSession.Backend ourBackend;

}
