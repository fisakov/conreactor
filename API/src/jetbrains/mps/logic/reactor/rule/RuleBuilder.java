package jetbrains.mps.logic.reactor.rule;

/*Generated by MPS */

import jetbrains.mps.logic.reactor.constraint.occurrence.AbstractConstraintOccurrence;
import jetbrains.mps.logic.reactor.constraint.occurrence.ConstraintOccurrence;
import java.util.Collections;
import com.google.common.collect.Iterables;
import java.util.List;
import java.util.ArrayList;

public class RuleBuilder {

  public RuleBuilder(String tag) {
    this.tag = tag;
  }

  public RuleBuilder appendBody(AbstractConstraintOccurrence... c) {
    for (int i = 0; i < c.length; i++) {
      body.add(c[i]);
    }
    return this;
  }

  public RuleBuilder appendGuard(AbstractConstraintOccurrence... c) {
    for (int i = 0; i < c.length; i++) {
      guard.add(c[i]);
    }
    return this;
  }

  public RuleBuilder appendHeadReplaced(ConstraintOccurrence... uc) {
    for (int i = 0; i < uc.length; i++) {
      headReplaced.add(uc[i]);
    }
    return this;
  }

  public RuleBuilder appendHeadKept(ConstraintOccurrence... uc) {
    for (int i = 0; i < uc.length; i++) {
      headKept.add(uc[i]);
    }
    return this;
  }

  public boolean hasHead() {
    return !((headKept.isEmpty() && headReplaced.isEmpty()));
  }

  public boolean hasGuard() {
    return !(guard.isEmpty());
  }

  public boolean hasBody() {
    return !(body.isEmpty());
  }

  public RuleBuilder merge(RuleBuilder... other) {
    doMerge(other);
    return this;
  }

  public jetbrains.mps.logic.reactor.rule.Rule toRule() throws InvalidRuleException {
    jetbrains.mps.logic.reactor.rule.Rule.Kind kind;
    if (!(headKept.isEmpty()) && !(headReplaced.isEmpty())) {
      kind = jetbrains.mps.logic.reactor.rule.Rule.Kind.SIMPAGATION;

    } else if (!(headReplaced.isEmpty())) {
      kind = jetbrains.mps.logic.reactor.rule.Rule.Kind.SIMPLIFICATION;

    } else if (!(headKept.isEmpty())) {
      kind = jetbrains.mps.logic.reactor.rule.Rule.Kind.PROPAGATION;

    } else {
      throw new InvalidRuleException("Invalid rule: empty head in " + toString());
    }

    if (body.isEmpty()) {
      throw new InvalidRuleException("Invalid rule: empty body in " + toString());
    }

    headKept = Collections.unmodifiableList(headKept);
    headReplaced = Collections.unmodifiableList(headReplaced);
    guard = Collections.unmodifiableList(guard);
    body = Collections.unmodifiableList(body);

    return new RuleBuilder.Rule(kind, tag);
  }

  @Override
  public String toString() {
    return String.format("%s (%d,%d,%d,%d)", tag, headKept.size(), headReplaced.size(), guard.size(), body.size());
  }

  private void doMerge(RuleBuilder... other) {
    for (int i = 0; i < other.length; i++) {
      RuleBuilder toMerge = other[i];

      headReplaced.addAll(toMerge.headReplaced);
      headKept.addAll(toMerge.headKept);
      guard.addAll(toMerge.guard);
      body.addAll(toMerge.body);
    }
  }

  public class Rule extends jetbrains.mps.logic.reactor.rule.Rule {

    private Rule(jetbrains.mps.logic.reactor.rule.Rule.Kind kind, String tag) {
      this.kind = kind;
      this.tag = tag;
    }

    public jetbrains.mps.logic.reactor.rule.Rule.Kind kind() {
      return kind;
    }

    @Override
    public String tag() {
      return tag;
    }

    @Override
    public Iterable<ConstraintOccurrence> headKept() {
      return headKept;
    }

    @Override
    public Iterable<ConstraintOccurrence> headReplaced() {
      return headReplaced;
    }

    @Override
    public Iterable<AbstractConstraintOccurrence> guard() {
      return guard;
    }

    @Override
    public Iterable<AbstractConstraintOccurrence> body() {
      return body;
    }

    @Override
    public Iterable<AbstractConstraintOccurrence> all() {
      return Iterables.concat(headKept, headReplaced, guard, body);
    }

    private jetbrains.mps.logic.reactor.rule.Rule.Kind kind;
    private String tag;
  }

  private String tag;
  private List<ConstraintOccurrence> headKept = new ArrayList<ConstraintOccurrence>(4);
  private List<ConstraintOccurrence> headReplaced = new ArrayList<ConstraintOccurrence>(4);
  private List<AbstractConstraintOccurrence> guard = new ArrayList<AbstractConstraintOccurrence>(4);
  private List<AbstractConstraintOccurrence> body = new ArrayList<AbstractConstraintOccurrence>(4);
}
