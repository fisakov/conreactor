package jetbrains.mps.logic.reactor.logical;

/*Generated by MPS */


/**
 * A logical variable that can be joined with another variable to produce a union.
 *
 * @param <T> the value type
 */
public interface JoinableLogical<T> extends Logical<T> {

  /**
   * Covariant override.
   */
  JoinableLogical<T> findRoot();

  /**
   * Unions two equivalence classes of logicals. 
   * Both the receiver and the {@code other} parameter are expected to be representatives.
   * The one with the highest rank becomes the representative for the new class.
   */
  void union(JoinableLogical<T> other, JoinableLogical.ValueReconciler<T> reconciler);

  /**
   * Calls {@link JoinableLogical#union(JoinableLogical <T>, JoinableLogical.ValueReconciler<T>) } with the default value reconciler.
   * The default reconciler throws {@link java.lang.IllegalArgumentException } if the two values are not equal.
   */
  void union(JoinableLogical<T> other);

  /**
   * Should only be called on a representative. 
   */
  void setValue(T newValue);

  interface ValueReconciler<T> {

    void reconcile(T valueA, T valueB);

  }

}
