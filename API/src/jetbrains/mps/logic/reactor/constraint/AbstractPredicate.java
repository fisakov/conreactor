package jetbrains.mps.logic.reactor.constraint;

/*Generated by MPS */

import java.util.Collection;
import java.util.Collections;
import java.util.Arrays;

public abstract class AbstractPredicate implements Predicate {

  public AbstractPredicate(Object... arguments) {
    this.arguments = arguments;
  }

  @Override
  public Collection<?> arguments() {
    return Collections.unmodifiableList(Arrays.asList(arguments));
  }

  public Constraint asConstraint() {
    return (Constraint) this;
  }

  public Predicate asAutoConstraint() {
    return (Predicate) this;
  }

  @Override
  public String toString() {
    return symbol().toString();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    AbstractPredicate that = (AbstractPredicate) o;
    if ((symbol() != null ? !(((Object) symbol()).equals(that.symbol())) : that.symbol() != null)) {
      return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + ((symbol() != null ? String.valueOf(symbol()).hashCode() : 37));
    return result;
  }

  private Object[] arguments;
}
