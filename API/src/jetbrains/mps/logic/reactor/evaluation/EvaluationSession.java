package jetbrains.mps.logic.reactor.evaluation;

/*Generated by MPS */

import jetbrains.mps.logic.reactor.logical.LogicalContext;
import jetbrains.mps.logic.reactor.program.*;

import java.util.List;

public abstract class EvaluationSession {

    public static EvaluationSession current() {
        if (ourBackend == null) {
            throw new IllegalStateException("no backend");
        }
        return ourBackend.current();
    }

    public static EvaluationSession.Config newSession(Program program) {
        if (ourBackend == null) {
            throw new IllegalStateException("no backend");
        }
        return ourBackend.createConfig(program);
    }

    public static abstract class Config {

        public abstract EvaluationSession.Config withPredicates(PredicateSymbol... predicateSymbols);

        public abstract EvaluationSession.Config withTrace(EvaluationTrace computingTracer);

        public abstract EvaluationSession.Config withStoreView(StoreView storeView);

        public abstract EvaluationSession.Config withParam(String key, Object param);

        public abstract EvaluationSession start(SessionSolver sessionSolver);

    }

    public abstract SessionSolver sessionSolver();

    public abstract StoreView storeView();

    public abstract PredicateInvocation invocation(Predicate predicate, LogicalContext logicalContext);

    public abstract ConstraintOccurrence occurrence(Constraint constraint, LogicalContext logicalContext);

    protected static void setBackend(EvaluationSession.Backend backend) {
        if (ourBackend != null) {
            throw new IllegalStateException("backend already assigned");
        }
        ourBackend = backend;
    }

    protected static void clearBackend(EvaluationSession.Backend backend) {
        if (ourBackend != backend) {
            throw new IllegalStateException("illegal access");
        }
        ourBackend = null;
    }

    protected interface Backend {

        EvaluationSession current();

        EvaluationSession.Config createConfig(Program program);

    }

    private static EvaluationSession.Backend ourBackend;

}
